package lectures.week1basics

object Recursion extends App {

  //====================================рекурсии===========================================

  //======================================цикл_while============================================

  var i : Int = 1 // объявляем переменную
  // цикл
  while  (i < 3) {
    println(s"now - $i")
    i += 1
  }
  // но делать так не нужно

  //================================рекурсия==================================================

  def factorial(n : Int) : Int = {
    if (n <= 0) 1
    else n * factorial(n - 1) // вот вызов функции внутри её же самой
  }

  println(factorial(3))

  //==========================хвостовая рекурсия (Tail Recursion)==============================

  // использование хвостовой рекурсии позволяет избежать ошибки StackOverFlow
  // а так же ускоряет время выполнения программы на больших данных
  // вот сравнение факториала с рекурсией и хвостовой рекурсии для факториала числа 10000
  // скорость выполнения простой рекурсии 732600
  // скорость выполнения хвостовой рекурсии 85700

  import scala.annotation.tailrec // импорт аннотации для проверки хвостовой рекурсии

  def factotialWithTailRecursion(n : Int) : Int = {
    @tailrec // аннотация для проверки хвостовой рекурсии, если нет хвоста код не запустится
    def loop(x: Int, accumulator: Int = 1) : Int = {         //вспомогательная функция с акумулятором
      if(x <= 0) accumulator
      else loop(x-1, x * accumulator) // накопление значений
    }

    loop(n) // вызов вспомогательной функции из основной
  }


  // n - количество вызовов вспомогательной функции, а также основной аргумент
  // loop - вспомогательная функция которая накапливает значение в else
  // последней строкой идет вызов функции loop
}
